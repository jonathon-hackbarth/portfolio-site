---
export interface Props {
  title: string;
  description?: string;
}

const {
  title,
  description = "Explore the portfolio of Jonathon Hackbarth, Cloud Systems Engineer & Web Developer.",
} = Astro.props;

const siteUrl = "https://jonathonhackbarth.com";
const canonical = siteUrl + (Astro.url?.pathname || "/");
const ogImage = `${siteUrl}/social-image.png`; // Placeholder path; replace with generated image later
const personJsonLd = {
  '@context': 'https://schema.org',
  '@type': 'Person',
  name: 'Jonathon Hackbarth',
  url: siteUrl,
  sameAs: [
    'https://github.com/jonathon-hackbarth',
    'https://www.linkedin.com/in/jonathon-w-hackbarth'
  ],
  jobTitle: 'Cloud Systems Engineer & Web Developer',
  description
};
---

<!doctype html>
<html lang="en">
  <head>
    <base href="/" />
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="" />
    <meta name="generator" content={Astro.generator} />
  <link rel="canonical" href={canonical} />
  <meta name="robots" content="index,follow" />
  <meta name="theme-color" content="#ffffff" />
  <meta name="color-scheme" content="light dark" />
  <link rel="preconnect" href="https://avatars.githubusercontent.com" crossorigin />

    <!-- Page Title -->
    <title>{title}</title>

    <!-- Meta Description -->
    <meta name="description" content={description} />

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
  <meta property="og:url" content={canonical} />
  <meta property="og:image" content={ogImage} />
  <meta property="og:image:alt" content={`Preview image for ${title}`} />

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
  <meta property="twitter:image" content={ogImage} />
  <meta property="twitter:image:alt" content={`Preview image for ${title}`} />

    {
      /** Font Awesome removed: using react-fontawesome tree-shaken imports instead */
    }
  <script type="application/ld+json" is:inline>{JSON.stringify(personJsonLd)}</script>
  </head>
  <body>
    <script is:inline>
      {`(() => { try { const t = localStorage.getItem('theme-pref-v1'); if (t==='dark') document.documentElement.classList.add('theme-dark'); } catch {} })();`}
    </script>
    <slot />
  </body>
</html>
