---
import type { ProjectData as BaseProjectData } from "../utils/projectUtils";
import { GITHUB_CONFIG } from "../utils/constants";
import { getProjectsData } from "../utils/projectUtils";

interface ProjectData extends BaseProjectData {
  homepage?: string | null;
  fork?: boolean;
}

let projects: ProjectData[] = [];
let error: string | null = null;
try {
  const token = import.meta.env.GH_TOKEN;
  if (!token) throw new Error("GitHub token not configured");

  // Fetch repos directly from GitHub (avoids internal /api call in SSR context)
  const repoRes = await fetch(
    `https://api.github.com/users/${GITHUB_CONFIG.USERNAME}/repos?sort=updated&direction=desc`,
    {
      headers: {
        Authorization: `Bearer ${token}`,
        Accept: "application/vnd.github.v3+json",
      },
    }
  );
  if (!repoRes.ok) {
    throw new Error(`GitHub API responded with ${repoRes.status}`);
  }
  const repos = await repoRes.json();
  projects = await getProjectsData(repos, token);
} catch (err) {
  error = err instanceof Error ? err.message : "Failed to load projects";
}
---

<section id="projects" class="projects-section">
  <h2 class="projects-title">Recent Projects</h2>
  {
    error && (
      <div class="flex justify-center items-center py-8">
        <div class="text-center text-red-500">Error: {error}</div>
      </div>
    )
  }
  {
    !error && projects.length === 0 && (
      <div class="flex justify-center items-center py-8">
        <div class="text-center">No projects found.</div>
      </div>
    )
  }
  {
    !error && projects.length > 0 && (
      <div class="projects-grid flex flex-wrap gap-4">
        {projects.map((p) => {
          return (
            <div class="project-wrapper">
              <article
                class="project-card"
                aria-labelledby={`project-title-${p.name}`}
              >
                <div class="project-content">
                  <h3 id={`project-title-${p.name}`} class="project-title">
                    {p.name}
                  </h3>
                  <p class="project-description">
                    {p.description || "No description available."}
                  </p>
                  <div
                    class="project-buttons"
                    role="group"
                    aria-label="Project actions"
                  >
                    {p.homepage ? (
                      <a
                        href={p.homepage}
                        target="_blank"
                        rel="noopener noreferrer"
                        class="project-button-tiertiary"
                        aria-label={`Visit ${p.name} website`}
                      >
                        Site
                      </a>
                    ) : null}
                    <button
                      type="button"
                      class="project-button-primary clone-btn"
                      data-clone-url={p.html_url}
                      aria-label={`Copy git clone command for ${p.name}`}
                      data-clone-label="Clone"
                      data-clone-copied="Copied!"
                      data-clone-failed="Failed"
                    >
                      Clone
                    </button>
                    <a
                      href={p.html_url}
                      target="_blank"
                      rel="noopener noreferrer"
                      class="project-button-secondary"
                      aria-label={`View ${p.name} repository on GitHub`}
                    >
                      Repo
                    </a>
                  </div>
                  <hr class="project-divider" aria-hidden="true" />
                  {p.languages && p.languages.length > 0 && (
                    <div
                      class="project-languages"
                      role="list"
                      aria-label="Project languages"
                    >
                      {p.languages.map((lang) => (
                        <div class="language-tag" role="listitem">
                          <span class="language-name">{lang.name}</span>
                          <span
                            class="language-percentage"
                            aria-label={`${lang.percentage}% ${lang.name}`}
                          >
                            {lang.percentage}%
                          </span>
                        </div>
                      ))}
                    </div>
                  )}
                  <footer class="project-footer">
                    <div class="flex items-center">
                      <a
                        href={p.html_url}
                        target="_blank"
                        rel="noopener noreferrer"
                        aria-label={`View ${p.name} on GitHub`}
                        class="github-link"
                      >
                        GitHub
                      </a>
                      {p.fork ? (
                        <span
                          class="ml-2 text-xs text-gray-500"
                          title="Forked repository"
                        >
                          Fork
                        </span>
                      ) : null}
                    </div>
                    <time class="update-time" datetime={p.pushed_at}>
                      Updated on{" "}
                      {new Date(p.pushed_at).toLocaleDateString("en-US", {
                        day: "numeric",
                        month: "long",
                        year: "numeric",
                      })}
                    </time>
                  </footer>
                </div>
              </article>
            </div>
          );
        })}
      </div>
    )
  }
  <script is:inline>
    (function () {
      const live = document.getElementById("clone-status-live");
      function setLive(msg) {
        if (live) live.textContent = msg;
      }
      function buildCmd(url) {
        // Avoid double .git
        const clean = url.endsWith(".git") ? url : url + ".git";
        return "git clone " + clean;
      }
      function copyViaExec(text) {
        const ta = document.createElement("textarea");
        ta.value = text;
        ta.setAttribute("readonly", "");
        ta.style.position = "fixed";
        ta.style.opacity = "0";
        document.body.appendChild(ta);
        ta.select();
        let ok = false;
        try {
          ok = document.execCommand("copy");
        } catch {}
        document.body.removeChild(ta);
        return ok;
      }
      async function writeClipboard(text) {
        if (navigator.clipboard && navigator.clipboard.writeText) {
          try {
            await navigator.clipboard.writeText(text);
            return true;
          } catch (e) {
            /* fall through */
          }
        }
        return copyViaExec(text);
      }
      function ensureHelper() {
        let helper = document.getElementById("clone-fallback-helper");
        if (!helper) {
          helper = document.createElement("div");
          helper.id = "clone-fallback-helper";
          helper.style.position = "fixed";
          helper.style.bottom = "1rem";
          helper.style.left = "50%";
          helper.style.transform = "translateX(-50%)";
          helper.style.background = "var(--color-surface,#222)";
          helper.style.color = "var(--color-text,#fff)";
          helper.style.padding = "0.75rem 1rem";
          helper.style.fontSize = "0.85rem";
          helper.style.border = "1px solid var(--color-border,#444)";
          helper.style.borderRadius = "6px";
          helper.style.boxShadow = "0 4px 16px rgba(0,0,0,.25)";
          helper.style.zIndex = "9999";
          helper.style.maxWidth = "90%";
          helper.style.wordBreak = "break-all";
          helper.setAttribute("role", "alert");
          document.body.appendChild(helper);
        }
        return helper;
      }
      function showFallback(cmd) {
        const el = ensureHelper();
        el.innerHTML = "";
        const msg = document.createElement("div");
        msg.textContent = "Copy failed. Manually copy below:";
        const pre = document.createElement("pre");
        pre.style.margin = "0.5rem 0 0";
        pre.style.padding = "0.5rem";
        pre.style.background = "rgba(0,0,0,.15)";
        pre.style.fontSize = "0.75rem";
        pre.style.whiteSpace = "pre-wrap";
        pre.textContent = cmd;
        el.appendChild(msg);
        el.appendChild(pre);
        setTimeout(() => {
          if (el.parentNode) el.parentNode.removeChild(el);
        }, 6000);
        try {
          const r = document.createRange();
          r.selectNodeContents(pre);
          const sel = window.getSelection();
          if (sel) {
            sel.removeAllRanges();
            sel.addRange(r);
          }
        } catch {}
      }
      function handleClick(btn) {
        const url = btn.getAttribute("data-clone-url");
        if (!url) return;
        const baseLabel = btn.getAttribute("data-clone-label") || "Clone";
        const copiedLabel = btn.getAttribute("data-clone-copied") || "Copied!";
        const failedLabel = btn.getAttribute("data-clone-failed") || "Failed";
        const gitCmd = buildCmd(url);
        // Avoid disabling until after attempt to preserve gesture integrity (some browsers are picky)
        writeClipboard(gitCmd)
          .then((ok) => {
            if (ok) {
              btn.textContent = copiedLabel;
              setLive(
                "Copied clone command for " +
                  (btn.getAttribute("aria-label") || "project")
              );
              btn.disabled = true;
              setTimeout(() => {
                btn.textContent = baseLabel;
                btn.disabled = false;
              }, 1800);
            } else {
              btn.textContent = failedLabel;
              setLive("Failed to copy clone command");
              showFallback(gitCmd);
              setTimeout(() => {
                btn.textContent = baseLabel;
              }, 2200);
            }
          })
          .catch(() => {
            btn.textContent = failedLabel;
            setLive("Failed to copy clone command");
            showFallback(gitCmd);
            setTimeout(() => {
              btn.textContent = baseLabel;
            }, 2200);
          });
      }
      function bind() {
        document.querySelectorAll(".clone-btn").forEach((btn) => {
          if (btn._cloneBound) return; // @ts-ignore marker property
          btn._cloneBound = true; // @ts-ignore
          btn.addEventListener("click", function (e) {
            e.preventDefault();
            handleClick(btn);
          });
        });
      }
      // Initial
      if (document.readyState === "loading") {
        document.addEventListener("DOMContentLoaded", bind, { once: true });
      } else {
        bind();
      }
      // In case of any dynamic changes later (not expected but future-proof)
      const mo = new MutationObserver(bind);
      mo.observe(document.documentElement, { childList: true, subtree: true });
    })();
  </script>
  <div
    id="clone-status-live"
    class="sr-only"
    aria-live="polite"
    aria-atomic="true"
  >
  </div>
</section>
